<!--
One line description, required for extensions repository catalog.
   * Set SHORTDESCRIPTION = Advanced logging using Log::Dispatch
-->
---+!! LogDispatchContrib

%SHORTDESCRIPTION%

%TOC%

---++ Introduction

LogDispatchContrib is a pluggable logger implementation that can replace the
default loggers shipped with Foswiki.  It provides logging methods similar to
the Compatibility logger shipped with Foswiki, and adds several alternative
methods to support alternate destinations.

The following log methods are shipped by default:

   $ ==LogDispatch::File==: A simple file based logger.  It does not do any file rotation or date stamping of the files.
   $ ==LogDispatch::FileRolling==: A file based logger similar to the "Compatibility" logger used by default on Foswiki 1.0.  It logs to files named with a date stamp, for example events-2012-09.log.   The pattern for the file name is configurable. This logger supports several advanced features:
      * Files are "thread safe": locked so that multiple process can safely log to a common file
      * Files are "fork safe": The file is closed and reopened if a fork is detected
   $ ==LogDispatch::Screen==: Logs to STDERR, which is typically written to the Apache (Web Server) error log..
   $ ==LogDispatch::Syslog==: Logs to the local Syslog daemon.  By default logs to the =user= facility.

The architecure of LogDispatch is pluggable.  It is expected that additional
loggers will be added, such as =Log::Dispatch::DBI=, =Log::Dispatch::Jabber=,
etc.

Note that all loggers can be enabled to log all levels to all methods. When a
log message is requested by a Foswiki function, Log::Dispatch examines the log
level of the request, and passes the message to each enabled logger in
sequence that has requested that log level.

---++ Foswiki Logging

=Log::Dispatch= supports the 8 logging levels typical in most logging systems.
=debug-0 info-1, notice-2, warning-3, error-4, critical-5, alert-6 and emergency-7=,  however Foswiki uses only a subset of these levels:
   * =debug= level 0 is used for some error reporting, and when debugging is enabled in the core and for some extensions.
   * =info= level 1 is used for transation logging.  The following fields are written by default:
   * =warning=  Errors and other failures are written to the warning log level

---+++ Fields available for logging

| timestamp | A Foswiki timestamp in the format of 2013-12-04T03:12:39Z |
| level | Log level: debug, info, warning |
| user | Typically the logged in user / WikiName |
| action | The web transaction:  save, view, viewfile, etc. |
| webTopic | The fully qualified web.topicname |
| extra | Catch-all field contains messages and other information |
| agent | The browser agent when available |
| remoteAddr | The remote IP address |
| caller | For errors. the perl module that triggered the error |

=extra= is a catch-all that is used in a number of different ways:
   * Topic actions, it includes things like new topic name for move/copy, special commands like =delRev=, etc.
   * Login/Logout actions including authentication failures
   * From / To revision levels for RDiff
   * Email address changes
   * Whether topic was cached in view operation
   * Registration email, login name, etc.
   * Filename for attach operations
   * The internal stack call trace for failures
   * ... many others

It's our intention to eventually move much of this information to fixed fields
to facilitate more powerful log processing.

---++ Logger features and configuration

---+++ Common configuration for all loggers

The followng common features apply to all Loggers:

   $ ==$Foswiki::cfg{Log}{LogDispatch}{MaskIP}==: Hide IP Addresses logged in the event log.  Default: IP addresses are logged.  Two possible options can be configured: ==x.x.x.x== will cause the =remoteAddr= field to be replaced with =x.x.x.x=.  ==hash== will cause the IP address to be scrambled, so that the original address is not easily identifiable, but multiple transactions from the same IP address will be logged using the same address.  Note: the hash method does not work for IPv6 addresses.
   $ ==$Foswiki::cfg{Log}{LogDispatch}{EventIterator}==: Specified which logger should be used to retrieve messages when the =eachEventSince= function is used.   This is an _expert_ level setting. See the help in =bin/configure= for more information.

The log layout feature applies to all of the flat record loggers.

   $ ==$Foswiki::cfg{Log}{LogDispatch}{== _&lt;LoggerName&gt;_ ==}{Layout}==; Specifies an array of fields that defines the flat log record layout.  This is an expert level parameter

The log file layout default settings are set to match the Plain and Compatibility file loggers as closely as possible.  The setting is an array of fields,  the first entry being the
delimiter used when joinin the fields.   The left side of the list ==info =>== is the filename.   The right side is the list of fields.  So for a simple example,
<verbatim>
   fileprefix => ['delim', 'field1',   'field2'    ]
   iphits =>     [  '|',   'timestamp'.'remoteAddr']
</verbatim>
would write out a simple file =iphits.log=, consisting of the timestamp and remote IP address.
<verbatim>
|2013-12-04T03:12:39Z|127.0.0.1|
|2013-12-04T03:12:43Z|10.20.1.1|
</verbatim>
In order to generate logs fully compatible with the old loggers, the following additional values are allowed:
   * Delimiter can include leading/trailing space,  " | ",   Space at beginning/end of record are trimmed.
   * The array can be nested one level deep.  For example, in the below example, the first field combines the timestamp and log level joined with  a space
   * The special field '*' is a wildcard, and logs any extra fields that were omitted from the layout.
<verbatim>
   $Foswiki::cfg{Log}{LogDispatch}{File}{Layout}=  {
        info => [' | ',                   # Delimiter
                   [' ',                    # Field 1 - inner delimiter
                    'timestamp',            # Field 1 first part
                    'level'                 # Field 1 2nd part
                   ],                       # End of field 1
                 'user',                  # Field 2
                 'action',                # Field 3
                 'webTopic',              # Field 4
                  [' ',                     # Field 5 - inner delimiter
                   'extra',                 # Field 5 first subfield
                   'agent',                 # Field 5 2nd subfield
                   '*',                     # Field 5 - anything left over after record is built.
                  ],                        # End of Field 5
                 'remoteAddr'             # Field 6
               ],
        DEFAULT => [' | ',              # This layout covers any other log levels not explicitly defined
                    [' ',                   # Field 1 - 2 subfields joined with space
                     'timestamp',
                     'level'],
                    [' ',                   # Field 2 - 2 subfields joined with space
                     'caller',
                      'extra']
                   ],
        };
</verbatim>

---+++ =LogDispatch::File= simple file logging

When enabled, the default configuration:
   * debug messages (Level 0) are writen to =debug.log=
   * info messages (Level 1) are written to =events.log=
   * notice-emergency (Levels 2-7) are written to =error.log=

This can be overridden with an "Expert" level configuration variable, which
assigns a range of log levels to a filename prefix.  The left side of the ==>=
is the filename prefix, and the right side is the =lower:higher= log level to
be written to that file.

There is an extra filter option that can be used to direct a subset of log
messages to a file.  The log request is assembled into the complete message,
and then the optional 3rd parameter is applied as a regular expression against
that message.  If the regex matches, the record will be logged.

This example implements the default log levels as shown above, and then
applies two filtered loggers:
   * Authentication messages (matching string =AUTHENTICATION=) are sent to =auth.log=
   * registration start, requests and rejections are logged to =reg.log=

<verbatim>
$Foswiki::cfg{Log}{LogDispatch}{File}{FileLevels} = {
    debug  => 'debug:debug',
    events => 'info:info',
    error  => 'notice:emergency',
    auth   => 'info:info:AUTHENTICATION',
    reg    => 'info:warning:\\| [Rr]eg(start|ister|istration)',
    };
</verbatim>

---+++ =LogDispatch::FileRolling= "Stamped" file logger

<div class="foswikiHelp">%X% This logger has additional dependencies:
   * =Log::Dispatch::File::Rolling= must be installed using CPAN
   * =Log::Log4perl::DateFormat= required for the filename patern parsing
</div>

*This is the recommended logger for file logging, especially on busy systems*

When enabled, the default configuration:
   * debug messages (Level 0) are writen to =debug-yyyy-mm.log=
   * info messages (Level 1) are written to =events-yyyy-mm.log=
   * notice-emergency (Levels 2-7) are written to =error-yyyy-mm.log=

The !FileRolling logger is very similar to the simple File logger, however it
generates filenames using a pattern substitution for Year, Month, and a subset
of other options supported by !Log4Perl.  The pattern substitution is applied
_only_ to the characters inside the =%d{...}= block.  The default pattern:

<verbatim>
$Foswiki::cfg{Log}{LogDispatch}{FileRolling}{Pattern} = '-%d{yyyy-MM}.log';
</verbatim>
is appended to the filename prefix, and the substitution is
applied.  For example:  =error-2012-09.log= or =events-2012-12.log=

<div class="foswikiHelp">%T% In order to "continue" an existing !PlainFile log using !LogDispatchContrib:
   * Quiesce your Foswiki system to avoid writing new log messages
   * Move the old log files to the name that LogDispatch will use:
      * =events.log= to =events.yyyymm=
      * =debug.log= to =debug.yyyymm=
      * =error.log= to =error.yyyymm=
   * Using bin/configure, change the Pattern to =%d{yyyyMM}= and verify that !FileRolling is enabled.
   * Restart / re-enable your server
</div>

The following character patterns are supported, however many will not make
sense as part of a filename.

| *Character* | *Definition* | *Type* | *eachEvent* | *Example* |
|    G     | era designator      | (Text)         | | AD |
|    e     | epoch seconds       | (Number)       |%X%| 1315011604 |
|    y     | year                | (Number)       | | 1996 |
|    M     | month in year       | (Number)       | | 07 |
|    M     | month in year       | (Text)         |%X%| July (Text if pattern longer than 2 characters) |
|    d     | day in month        | (Number)       | | 10 |
|    h     | hour in am/pm (1~12)| (Number)       |%X%| 12 |
|    H     | hour in day (0~23)  | (Number)       |%X%| 0 |
|    m     | minute in hour      | (Number)       |%X%| 30 |
|    s     | second in minute    | (Number)       |%X%| 55 |
|    S     | millisecond         | (Number)       |%X%| 978 |
|    E     | day in week         | (Text)         |%X%| Tuesday |
|    D     | day in year         | (Number)       | | 189 |
|    a     | am/pm marker        | (Text)         |%X%| PM |
|    Z     | RFC 822 time zone   | (Text)         |%X%| -0800 |
|    $     | process id          | (Number)       |%X%| 8232 |

   * %X% - not supported for =eachEventSince= log processing.
   * ==$== Process ID can be used to isolate logs per process to avoid any contention on extremely busy system, or when the system cannot support file locking.

As with the File logger, the log levels 0-7 are mapped to file name prefixes using an expert level parameter.  However unlike the File logger, __log filtering is not supported__

<verbatim>
$Foswiki::cfg{Log}{LogDispatch}{FileRolling}{FileLevels} = {
    debug  => 'debug:debug',
    events => 'info:info',
    error  => 'notice:emergency',
    };
</verbatim>

---+++ Screen (STDERR) logger

This method directs messages to the STDERR output.  STDERR is normally recorded in the Apache error log. When enabled, the default configuration sends  error, critical, emergency and alert messages to STDERR.
There are two configuration options, specifying the lowest and highest log level to be sent to STDERR.

---+++ Syslog logger
<div class="foswikiHelp">%X% This logger has additional dependencies:
   * =Sys::Syslog= is required for Syslog logging
</div>

The Syslog logger uses the system Syslog facility to send messages to the
system log. It is disabled by default.  It has 5 configuration options:
   * =Facility= - specifies the Syslog Facility set in the log message. Default is =user=.
   * =Identifier= - specifies a string that is prepended to each log message. Default is =Foswiki=.
   * =MinLevel= and
   * =MaxLevel= specifies the range of log levels sent to the Syslog logger.
   * =Logopt= Logger options understood by Syslog.  This is an expert level configuration. See http://perldoc.perl.org/Sys/Syslog.html and =bin/configure= help for details.

---++ Installation
%$INSTALL_INSTRUCTIONS%

---++ Possible future enhancements

   * Ensure consistent format for all logs - include the User, Web.Topic and IP address
   * Add DBI logger
   * IPv6 support
   * Add Jabber, DBI,  Windows even type loggers
   * Add filtering support for the !FileRolling logger similar to the File * logger.

---++ Info

|  Author: | George Clark |
|  Copyright &copy;: | 2012, Foswiki:Main.GeorgeClark |
|  License: | GPL ([[http://www.gnu.org/copyleft/gpl.html][GNU General Public License 3]]) |
|  Dependencies: | %$DEPENDENCIES% |
|  Version: | %$VERSION% |
|  Release: | %$RELEASE% |
|  Change History: | <!-- versions below in reverse order -->&nbsp; |
|  1.0.1 (15 Oct 2012): | Improved filter implementation,  improved file layout implementaiton |
|  1.0.0 (XX Mmm 20XX): | Initial version |
|  Home: | http://foswiki.org/Extensions/%TOPIC% |
|  Support: | http://foswiki.org/Support/%TOPIC% |


